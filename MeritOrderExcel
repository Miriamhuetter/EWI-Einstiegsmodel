#Extensions
using JuMP
using CPLEX
using XLSX, DataFrames

#Rufe die Excelliste "MeritOrder_Excel" und das entsprechende Tabellenblatt ab. Der Datentyp der Tabellenblatt-Inhalte wird ebenfalls definiert
Kraftwerkstyp = DataFrame(XLSX.readtable("MeritOrder_Excel.xlsx", "Kraftwerke")...) .|> string
Leistung = DataFrame(XLSX.readtable("MeritOrder_Excel.xlsx", "Leistung")...) .|> float 
Kosten = DataFrame(XLSX.readtable("MeritOrder_Excel.xlsx", "Kosten")...) .|> float
Nachfrage = DataFrame(XLSX.readtable("MeritOrder_Excel.xlsx", "Nachfrage")...) .|> float

println(Kraftwerkstyp) #Gebe die Tabelle "Kraftwerkstyp" der aufgerufenen Excelliste "MeritOrder_Excel" im Terminal aus
println() #Gebe eine leere Zeile im Terminal aus
println(Leistung) #Gebe die Tabelle "Leistung" der aufgerufenen Excelliste "MeritOrder_Excel" im Terminal aus
println()
println(Kosten)
println()
println(Nachfrage)
println()

println("Size of Leistungs-Matrix: ", size(Kraftwerkstyp)) #Gebe die Größe der Tabelle Kraftwerkstyp aus -> n wird anschließend für die definition Range verwendet
n_kraft, m_kraft = size(Kraftwerkstyp) #n Anzahl der Kraftwerkskategorien (Anzahl an Zeilen)
n_zeit, m_zeit = size(Nachfrage)

k = Array(Kraftwerkstyp)[:,1]
t = Array(Nachfrage)[:,1]
cost = Array(Kosten)[:,1]
Demand = Array(Nachfrage)[:,2]
capacity = Array(Leistung)[:, end]

cap_matrix = zeros(n_zeit,n_kraft)
cap_matrix[:,1] .= capacity[1]
cap_matrix[:,2] .= capacity[2]
cap_matrix[:,3] .= capacity[3]
cap_matrix[:,4] .= capacity[4]
cap_matrix[:,5] .= capacity[5]
cap_matrix[:,6] .= capacity[6]
cap_matrix[:,7] .= capacity[7]
cap_matrix[:,8] .= capacity[8]
cap_matrix[:,9] .= capacity[9]
cap_matrix[:,10] .= capacity[10]

cap_matrix

model = Model(CPLEX.Optimizer)
@variable(model, x[1:n_zeit, 1:n_kraft] >= 0) #Anzahl der Variablen = Anzahl der Kraftwerkskategorien
@objective(model, Min, sum(cost[k] * x[t, k] for t in 1:n_zeit, k in 1:n_kraft))
@constraint(model, c1, sum(x[:,k] for k in 1:n_kraft) .== Demand[1:end])
@constraint(model, c2, x[:,:] .<= cap_matrix)

print(model)
optimize!(model)
Werte = @show value.(x)
obj_value = @show objective_value(model) 

Ueberschriften = Kraftwerkstyp.Kraftwerkstyp #Umwandlung von Kraftwerkstyp als Matrix (Aus Exceltabelle) in einen Vector
Ergebnisse = DataFrame(Werte, Ueberschriften)

XLSX.writetable("Ergebnisse2.xlsx", Ergebnisse) 

#Matching Brennstoffkosten zu Kraftwerkstyp
#Variablenanzeiger VS
